// <auto-generated />
using System;
using EncryptLocker.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EncryptLocker.Database.Migrations
{
    [DbContext(typeof(EncryptLockerContext))]
    partial class EncryptLockerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EncryptLocker.Database.CypherValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Cypher")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varbinary(2048)");

                    b.Property<byte[]>("IV")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<byte[]>("Tag")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.HasKey("Id");

                    b.ToTable("CypherValues", (string)null);
                });

            modelBuilder.Entity("EncryptLocker.Database.Locker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("KeyHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Lockers", (string)null);
                });

            modelBuilder.Entity("EncryptLocker.Database.LockerAccessRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessType")
                        .HasColumnType("int");

                    b.Property<int>("LockerId")
                        .HasColumnType("int");

                    b.Property<int>("RegisteredUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LockerId");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("LockerAccessRights", (string)null);
                });

            modelBuilder.Entity("EncryptLocker.Database.PasswordReadLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RegisteredUserId")
                        .HasColumnType("int");

                    b.Property<int>("SafeEntryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId");

                    b.HasIndex("SafeEntryId");

                    b.ToTable("PasswordReadLogs", (string)null);
                });

            modelBuilder.Entity("EncryptLocker.Database.RegisteredUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AzureID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RegisteredUsers", (string)null);
                });

            modelBuilder.Entity("EncryptLocker.Database.SafeBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Discriminator")
                        .HasColumnType("int");

                    b.Property<int?>("LockerId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LockerId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TitleId");

                    b.ToTable("SafeBases", (string)null);

                    b.HasDiscriminator<int>("Discriminator");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EncryptLocker.Database.SafeEntry", b =>
                {
                    b.HasBaseType("EncryptLocker.Database.SafeBase");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("PasswordId")
                        .HasColumnType("int");

                    b.Property<int?>("UrlId")
                        .HasColumnType("int");

                    b.HasIndex("LoginId");

                    b.HasIndex("NoteId");

                    b.HasIndex("PasswordId");

                    b.HasIndex("UrlId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EncryptLocker.Database.SafeGroup", b =>
                {
                    b.HasBaseType("EncryptLocker.Database.SafeBase");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EncryptLocker.Database.LockerAccessRight", b =>
                {
                    b.HasOne("EncryptLocker.Database.Locker", "Locker")
                        .WithMany("LockerAccessRights")
                        .HasForeignKey("LockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EncryptLocker.Database.RegisteredUser", "RegisteredUser")
                        .WithMany("LockerAccessRights")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locker");

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("EncryptLocker.Database.PasswordReadLog", b =>
                {
                    b.HasOne("EncryptLocker.Database.RegisteredUser", "RegisteredUser")
                        .WithMany("PasswordReadLogs")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EncryptLocker.Database.SafeEntry", "SafeEntry")
                        .WithMany("PasswordReadLogs")
                        .HasForeignKey("SafeEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredUser");

                    b.Navigation("SafeEntry");
                });

            modelBuilder.Entity("EncryptLocker.Database.SafeBase", b =>
                {
                    b.HasOne("EncryptLocker.Database.Locker", null)
                        .WithMany("SafeEntries")
                        .HasForeignKey("LockerId");

                    b.HasOne("EncryptLocker.Database.SafeGroup", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EncryptLocker.Database.CypherValue", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("EncryptLocker.Database.SafeEntry", b =>
                {
                    b.HasOne("EncryptLocker.Database.CypherValue", "Login")
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EncryptLocker.Database.CypherValue", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EncryptLocker.Database.CypherValue", "Password")
                        .WithMany()
                        .HasForeignKey("PasswordId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EncryptLocker.Database.CypherValue", "Url")
                        .WithMany()
                        .HasForeignKey("UrlId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Login");

                    b.Navigation("Note");

                    b.Navigation("Password");

                    b.Navigation("Url");
                });

            modelBuilder.Entity("EncryptLocker.Database.Locker", b =>
                {
                    b.Navigation("LockerAccessRights");

                    b.Navigation("SafeEntries");
                });

            modelBuilder.Entity("EncryptLocker.Database.RegisteredUser", b =>
                {
                    b.Navigation("LockerAccessRights");

                    b.Navigation("PasswordReadLogs");
                });

            modelBuilder.Entity("EncryptLocker.Database.SafeEntry", b =>
                {
                    b.Navigation("PasswordReadLogs");
                });

            modelBuilder.Entity("EncryptLocker.Database.SafeGroup", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
